#include "file_monitor.h"
#include <sys/stat.h>
#include "error.h"

std::shared_ptr<FileMonitor> FileMonitor::create()
{
    std::shared_ptr<FileMonitor> monitor(new FileMonitor());
    monitor->init();

    return monitor;
}

void FileMonitor::init()
{
    _buffer.set_min_alloc_size(512);

    set_listener(kMsg_Timer, std::bind(&FileMonitor::on_timer, this, std::placeholders::_1));
}

void FileMonitor::add(const char *file_path)
{
    struct stat file_stat;
    int ret = stat(file_path, &file_stat);
    if (ret != 0)
    {
        throw_unix_error("stat");
    }

    _file_mtime_map.insert(std::make_pair(file_path, (int)file_stat.st_mtime));
}

void FileMonitor::remove(const char *file_path)
{
    _file_mtime_map.erase(file_path);
}

void FileMonitor::on_timer(Message &msg)
{
    for (auto it = _file_mtime_map.begin(); it != _file_mtime_map.end(); )
    {
        const std::string &file_path = it->first;
        struct stat file_stat;
        int ret = stat(file_path.c_str(), &file_stat);
        if (ret != 0)
        {
            _file_mtime_map.erase(it++);
            continue;
        }

        if (file_stat.st_mtime > it->second)
        {
            it->second = file_stat.st_mtime;
            
            size_t len = file_path.size();
            _buffer.resize(len);
            _buffer.set(0, file_path.data(), len);

            Message msg;
            msg.type = kMsg_ModifyFile;
            msg.object = &_buffer;
            send_msg(msg);
        }

        ++it;
    }
}
